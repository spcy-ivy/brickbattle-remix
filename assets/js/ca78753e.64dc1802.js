"use strict";(self.webpackChunkenhanced_brickbattle_design_documentation=self.webpackChunkenhanced_brickbattle_design_documentation||[]).push([[7956],{3956:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=n(7624),o=n(2172);const s={},i=void 0,r={id:"Philosophy/Mechanics",title:"Mechanics",description:"Instead of manually trying to add a deep and intricate tree of techniques, we're going to keep it simple and create a set of relatively surface level moves that synergize really well together.",source:"@site/docs/Philosophy/Mechanics.md",sourceDirName:"Philosophy",slug:"/Philosophy/Mechanics",permalink:"/docs/Philosophy/Mechanics",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Philosophy/Mechanics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fluff",permalink:"/docs/Philosophy/Fluff"},next:{title:"Technical Details",permalink:"/docs/TechnicalDetails/"}},c={},l=[];function h(e){const t={code:"code",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Instead of manually trying to add a deep and intricate tree of techniques, we're going to keep it simple and create a set of relatively surface level moves that synergize really well together."}),"\n",(0,a.jsx)(t.p,{children:"Much of Melee's appeal is a lot of its accidental discoveries, and we want to try to replicate that the best we can (even if it's very hard) by keeping the same nature of having a large pool of surface level techniques that flow very well together."}),"\n",(0,a.jsx)(t.p,{children:"The main idea should just be having a bunch of moves and making a tree of moves that are only one branch long. Having a large amount of two move combos should give a general idea of how to make combos if we wanted to go any deeper with them. Might also be a good way to gauge a character's potential!"}),"\n",(0,a.jsx)(t.p,{children:"This game will mostly follow the same control scheme as the smash series, so terms like f-air, n-air, f-tilt, f-smash still transfer. Only difference is that we're gonna be calling smash attacks strong attacks (which means f-smash will turn into f-strong) but I won't complain if you still use the previous term."}),"\n",(0,a.jsx)(t.p,{children:"Anyways, here's what an example graph should look like for certain characters."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"d-air -> f-air\nd-air -> n-air\n\nn-air -> grab\nn-air -> d-tilt\n"})}),"\n",(0,a.jsx)(t.p,{children:"Again, we're only going to limit the combos in this documentation to only two moves so that most of the advanced shit can be discovered emergently."})]})}function d(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>r,M:()=>i});var a=n(1504);const o={},s=a.createContext(o);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);